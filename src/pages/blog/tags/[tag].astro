---
import { getCollection, type CollectionEntry } from 'astro:content';
import type { GetStaticPaths } from 'astro';
import Layout from "@layouts/Layout.astro" // Adjust path
import Heading from '@components/Base/Heading/Heading.astro';
import Prose from '@layouts/Prose.astro';
import Link from '@components/Base/Link/Link.astro';

export const getStaticPaths = (async () => {
  const allPosts = await getCollection('blog');

//post.data.title.replace(/\s+/g, '-').toLowerCase()

  return allPosts.map((post) => ({
    params: { 
      id: post.data.id,
      slug: post.data.title.replace(/\s+/g, '-').toLowerCase()
    },
    props: { post },
  }));
}) satisfies GetStaticPaths;

const { post } = Astro.props as { post: CollectionEntry<'blog'> };

const data = post.data;
const content = post.rendered?.html;
---

<Layout title={post.data.title} class="max-w-screen-lg mx-auto mt-8">

  <hgroup class="mt-4">

    <p class="text-sm text-gray-500 dark:text-gray-400 mb-4 inline-flex items-center">
      <Link href="/blog" icon={{ name: "mdi:arrow-left", class: "inline-flex items-center"}} >Back to Blog</Link>
    </p>

    <Heading as="h1" >{post.data.title}</Heading>

    {data.summary && (
      <p class="lead mt-6">
        {data.summary}
      </p> 
    )}
  </hgroup>

  {data.author && (
    <p class="text-sm text-gray-500 dark:text-gray-400 mb-4">
      By {data.author}
    </p> 
  )}

  {data.created &&  (
    <p class="text-sm text-gray-500 dark:text-gray-400 mb-4">
      Published on: {new Date(data.created).toLocaleDateString(undefined, { year: 'numeric', month: 'long', day: 'numeric' })}
    </p>
  )}

  {data.changed &&  (
    <p class="text-sm text-gray-500 dark:text-gray-400 mb-4">
      Last updated on: {new Date(data.changed).toLocaleDateString(undefined, { year: 'numeric', month: 'long', day: 'numeric' })}
    </p>
  )}

  {data.tags && (() => {
    return (
      <ul>
        {data.tags?.map((tag) => {
          const tag_slug = tag.replace(/\s+/g, '-').toLowerCase();
          return (
            <li id={tag} class="inline-flex items-center bg-gray-200 dark:bg-gray-700 text-gray-800 dark:text-gray-200 rounded-full px-3 py-1 text-sm font-semibold mr-2 mb-2">
              <Link variant="link" href={`/blog/tags/${tag}`} icon={{name: "mdi:tag", class: "mr-1"}} class="no-underline hover:underline inline-flex items-center">
                {tag}
              </Link>
            </li>
          )
        })}
      </ul>
    ) 
  })}

  <Prose class="mt-8">
    <Fragment set:html={content ?? "<p>No element found</p>"} />
  </Prose>

  {data.author && (
    <p class="text-sm text-gray-500 dark:text-gray-400 mt-4">
      {data.author}
    </p> 
  )}
</Layout>