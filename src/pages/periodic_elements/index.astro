---
import Layout from "@layouts/Layout.astro";

// Content collection import
import { getCollection } from "astro:content";
const elements = await getCollection("elements");
const elementsData = elements
  // .filter((value, index, self) => {
  //   return self.findIndex((e) => e.data.number === value.data.number) === index;
  // })
  .map((element) => ({
    id: element.id,
    ...element.data,
  }))
  .sort((a, b) => a.number.valueOf() - b.number.valueOf());
// elementsData.sort((a, b) => a.number.valueOf() - b.number.valueOf());

//// General markdown import
// import type { MarkdownInstance } from "astro";
// interface Frontmatter {
//   number: number;
//   symbol: string;
//   name: string;
//   image?: string;
//   href?: string;
// }
// const elements = Object.values(
//   import.meta.glob<MarkdownInstance<Frontmatter>>(
//     "@data/periodic_elements/*.md",
//     { eager: true }
//   )
// );
// elements.sort((a, b) => a.frontmatter.number - b.frontmatter.number);
---

<Layout title="Periodic Elements">
  <h1>Periodic Elements</h1>
  <p>This is a page listing periodic elements</p>
  <ol>
    {
      elementsData.map((element) => {
        const href = `/periodic_elements/${element.id}`;
        return (
          <li data-number="{element.number}">
            <a class="element_link" href={href}>
              <article
                class="teaser element_teaser"
                data-number="{element.number}"
                data-symbol="{element.symbol}"
                data-name="{element.name}"
              >
                <span class="element_number">{element.number}</span>
                <span class="element_symbol">{element.symbol}</span>
                <h2 class="element_name">{element.name}</h2>
                <span class="element_weight">{element.weight}</span>

                {/* <dl>
                    <dt class="inline-label">Symbol</dt>
                  <dd>{element.symbol}</dd>
                    <dt class="inline-label">Atomic number</dt>
                    <dd>{element.number}</dd>
                    <dt class="inline-label">Atomic weight</dt>
                    <dd>{element.weight}</dd>
                    <dt class="inline-label">Appearance</dt>
                  <dd>{element.appearance}</dd>
                  </dl> */}

                {/* {element.image &&
                (() => {
                  const imgSrc = `/images/elements/${element.image}`;
                  return (
                    <div class="image">
                      <a href={href}>
                        <img
                          src={imgSrc}
                          alt={element.name}
                          width={150}
                          height={150}
                        />
                      </a>
                    </div>
                  );
                })} */}
              </article>
            </a>
          </li>
        );
      })
    }
  </ol>
</Layout>

<style>
  .teaser {
    display: flex;
    justify-content: space-between;
    align-items: center;
    gap: 1rem;
  }

  .teaser .image img {
    border-radius: 100rem;
    border: 1px solid #e5e7eb;
    filter: brightness(0.9);
  }

  ol,
  ul {
    list-style: none;
    margin: 1.5rem 0;
    padding: 0;
    border-radius: 4px;
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(16ch, 1fr));
    gap: 1rem;
  }

  li {
    display: flex;
    flex-direction: column;
  }

  .element_teaser {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
    background: #f9fafb;
    border: 1px solid #e5e7eb;
    border-radius: 8px;
    padding: 1rem;
    transition:
      background-color 0.2s,
      box-shadow 0.2s;
  }

  .element_link {
    text-decoration: none;
  }

  .element_symbol {
    font-size: 2.5rem;
    font-weight: bold;
    line-height: 1;
  }

  h2 {
    margin: 0;
    font-weight: normal;
    font-size: 1rem;
  }

  dl {
    /* display: grid;
    grid-template-columns: 20ch auto;
    gap: 0.5rem 1rem;
    margin: 0.5rem 0 1rem 0; */
  }

  dd,
  dt {
    /* margin-inline: 0;
    padding-inline: 0; */
  }

  dt {
    font-weight: 600;
  }

  dt:after {
    content: ":";
  }

  .button {
    display: inline-flex;
    align-items: center;
    padding: 10px 12px;
    color: white;
    background: #3245ff;
    box-shadow:
      inset 0 0 0 1px rgba(255, 255, 255, 0.12),
      inset 0 -2px 0 rgba(0, 0, 0, 0.24);
    text-decoration: none;
    transition:
      background-color 0.2s,
      box-shadow 0.2s;
    border-radius: 8px;
    font-weight: 500;
  }
</style>
