---
import Layout from "@layouts/Layout.astro";
import Footer from "@components/Footer.astro";
import Header from "@components/Header.astro";

// Content collection import
import { getCollection } from "astro:content";
const elements = await getCollection("periodic_elements_list");
const elementsData = elements.map((element) => ({
  id: element.id,
  ...element.data,
}));
elementsData.sort((a, b) => a.number.valueOf() - b.number.valueOf());

//// General markdown import
// import type { MarkdownInstance } from "astro";
// interface Frontmatter {
//   number: number;
//   symbol: string;
//   name: string;
//   image?: string;
//   href?: string;
// }
// const elements = Object.values(
//   import.meta.glob<MarkdownInstance<Frontmatter>>(
//     "@data/periodic_elements/*.md",
//     { eager: true }
//   )
// );
// elements.sort((a, b) => a.frontmatter.number - b.frontmatter.number);
---

<Layout title="Periodic Elements">
  <h1>Periodic Elements</h1>
  <p>This is a page listing periodic elements</p>
  <ol>
    {
      elements.map((el) => {
        const element = el.data;
        const href = `/periodic_elements/${element.number}_${element.name.toLowerCase()}`;
        return (
          <li data-number="{element.number}">
            <article
              class="teaser"
              data-number="{element.number}"
              data-symbol="{element.symbol}"
              data-name="{element.name}"
            >
              <div class="content">
                <h2>
                  {element.name} ({element.symbol})
                </h2>
                <dl>
                  <dt class="inline-label">Symbol</dt>
                  <dd>{element.symbol}</dd>
                  <dt class="inline-label">Atomic number</dt>
                  <dd>{element.number}</dd>
                  <dt class="inline-label">Atomic weight</dt>
                  <dd>{element.weight}</dd>
                  <dt class="inline-label">Appearance</dt>
                  <dd>{element.appearance}</dd>
                </dl>
                <a class="button" href={href}>
                  Learn more
                </a>
              </div>

              {element.image &&
                (() => {
                  const imgSrc = `/images/elements/${element.image}`;
                  return (
                    <div class="image">
                      <a href={href}>
                        <img
                          src={imgSrc}
                          alt={element.name}
                          width={150}
                          height={150}
                        />
                      </a>
                    </div>
                  );
                })}
            </article>
          </li>
        );
      })
    }
  </ol>
</Layout>

<style>
  .teaser {
    display: flex;
    justify-content: space-between;
    align-items: center;
    gap: 1rem;
  }

  .teaser .image img {
    border-radius: 100rem;
    border: 1px solid #e5e7eb;
    filter: brightness(0.9);
  }

  ol,
  ul {
    list-style: none;
    margin: 1.5rem 0;
    padding: 0;
    border: 1px solid #e5e7eb;
    border-radius: 4px;
  }

  li {
    padding: 1.5rem;
  }

  ol li + li {
    border-top: 1px solid #e5e7eb;
  }

  h2 {
    margin: 0;
    font-weight: bold;
  }

  dl {
    display: grid;
    grid-template-columns: 20ch auto;
    gap: 0.5rem 1rem;
    margin: 0.5rem 0 1rem 0;
  }

  dd,
  dt {
    margin-inline: 0;
    padding-inline: 0;
  }

  dt {
    font-weight: 600;
  }

  dt:after {
    content: ":";
  }

  .button {
    display: inline-flex;
    align-items: center;
    padding: 10px 12px;
    color: white;
    background: #3245ff;
    box-shadow:
      inset 0 0 0 1px rgba(255, 255, 255, 0.12),
      inset 0 -2px 0 rgba(0, 0, 0, 0.24);
    text-decoration: none;
    transition:
      background-color 0.2s,
      box-shadow 0.2s;
    border-radius: 8px;
    font-weight: 500;
  }
</style>
