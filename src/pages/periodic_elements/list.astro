---
import PeriodicTablePageDisplayNav from "@custom/PeriodicTablePageDisplayNav.astro";
import Layout from "@layouts/Layout.astro";

// Content collection import
import { getCollection } from "astro:content";
const elements = await getCollection("elements");
const elementsData = elements
  .map((element) => ({
    id: element.id,
    ...element.data,
  }))
  .sort((a, b) => a.number.valueOf() - b.number.valueOf());
---

<Layout title="Periodic Elements">
  <h1>Periodic Elements List</h1>
  <p>This is a page listing periodic elements</p>
  <PeriodicTablePageDisplayNav />
  <ol>
    {
      elementsData.map((element) => {
        const href = `/periodic_elements/test/${element.id}`;
        return (
          <li data-number="{element.number}">
            <article
              class="teaser element_teaser"
              data-number="{element.number}"
              data-symbol="{element.symbol}"
              data-name="{element.name}"
            >
              <span class="element_name">
                {element.name} <span>{element.symbol}</span>
              </span>
              <span class="element_weight">{element.weight}</span>
              <a class="element_link" href={href}>
                More information
              </a>
            </article>
          </li>
        );
      })
    }
  </ol>
</Layout>

<style>
  /* .teaser {
    display: flex;
    justify-content: space-between;
    align-items: center;
    gap: 1rem;
  } */

  /* .teaser .image img {
    border-radius: 100rem;
    border: 1px solid #e5e7eb;
    filter: brightness(0.9);
  } */

  ol,
  ul {
    list-style-type: decimal;
    margin: 2rem 0;
    padding: 0 0 0 1.25rem;
    /* border-radius: 4px; */
    /* gap: 1rem; */
  }

  li {
    /* display: flex; */
    /* flex-direction: column; */
  }

  /* .element_teaser {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
    background: #f9fafb;
    border: 1px solid #e5e7eb;
    border-radius: 8px;
    padding: 1rem;
    transition:
      background-color 0.2s,
      box-shadow 0.2s;
  } */

  /* .element_link {
    text-decoration: none;
  } */

  /* .element_symbol {
    font-size: 2.5rem;
    font-weight: bold;
    line-height: 1;
  } */

  /* h2 {
    margin: 0;
    font-weight: normal;
    font-size: 1rem;
  } */

  dl {
    /* display: grid;
    grid-template-columns: 20ch auto;
    gap: 0.5rem 1rem;
    margin: 0.5rem 0 1rem 0; */
  }

  dd,
  dt {
    /* margin-inline: 0;
    padding-inline: 0; */
  }

  /* dt {
    font-weight: 600;
  }

  dt:after {
    content: ":";
  } */

  /* .button {
    display: inline-flex;
    align-items: center;
    padding: 10px 12px;
    color: white;
    background: #3245ff;
    box-shadow:
      inset 0 0 0 1px rgba(255, 255, 255, 0.12),
      inset 0 -2px 0 rgba(0, 0, 0, 0.24);
    text-decoration: none;
    transition:
      background-color 0.2s,
      box-shadow 0.2s;
    border-radius: 8px;
    font-weight: 500;
  } */
</style>
