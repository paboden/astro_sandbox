---
import { Image } from "astro:assets";

import Layout from "@layouts/Layout.astro";
import Description from "@components/Element/Description.astro";


import type { MarkdownInstance } from 'astro';
interface Frontmatter {
    title: string;
    description?: string;
    number: number;
    symbol: string;
    name: string;
    stp?: string;
    density?: number;
    weight?: number;
    classification?: string;
    color?: string;
    appearance?: string;
    period?: number;
    block?: string;
    group?: number;
    configuration?: number[];
    oxidation_states?: (number | string)[];
    cas_number?: string[];
    ec_number?: string;
    chemspider_id?: number;
    pubchem_id?: number;
    year_discovered?: number;
    discovered_by?: string;
    year_named?: number;
    named_by?: string;
    name_meaning?: string;
    image?: string;
    wiki?: string;
    href?: string;
    facts?: string[];
    location?: string;
    protons?: number;
    neutrons?: number;
    electrons?: number;
    melting_point?: { type: string; value: number }[];
    boiling_point?: { type: string; value: number }[];
    vaporization?: number[];
}

export async function getStaticPaths() {
  const elements = Object.values(
    import.meta.glob<MarkdownInstance<Frontmatter>>("@content/elements/*.md", { eager: true })
  );

  return elements.map((el) => {
    const name = el.frontmatter.name;
    const number = el.frontmatter.number;
    const element = el.frontmatter;
    const content = el.compiledContent();

    return {
      params: { name: `${number}_${name.toLowerCase()}` },
      props: { element, content },
    };
  });
}

const { name } = Astro.params;
const { element, content } = Astro.props;
---

<Layout title=`Periodic Element: ${element.name}`>

  <h1>{element.name}</h1>

  <Description element={element} />

  {element.image && (() => {
    const imgSrc = `/images/elements/${element.image}`;
    return (
      <Image 
        src={imgSrc} 
        alt={element.name}
        inferSize={true}
        width={300}
        height={200}
      />
    )
  })}

  <dl>
    <dt>Atomic Number</dt>
    <dd>{element.number}</dd>

    <dt>Symbol</dt>
    <dd>{element.symbol}</dd>

    {element.density && (
      <dt>Density (g/L)</dt>
      <dd>{element.density}</dd>
    )}

    {element.weight && (
      <dt>Atomic Weight (u)</dt>
      <dd>{element.weight}</dd>
    )}

    {element.stp && (
      <dt>State at Standard Temperature and Pressure (STP)</dt>
      <dd>{element.stp}</dd>
    )}

    {element.appearance && (
      <dt>Appearance</dt>
      <dd>{element.appearance}</dd>
    )}

    {element.classification && (
      <dt>Classification</dt>
      <dd>{element.classification}</dd>
    )}

        {element.color && (
      <dt>Color</dt>
      <dd>{element.color}</dd>
    )}

    {element.period && (
      <dt>Period</dt>
      <dd>{element.period}</dd>
    )}

    {element.block && (
      <dt>Block</dt>
      <dd>{element.block}</dd>
    )}

    {element.group && (
      <dt>Group</dt>
      <dd>{element.group}</dd>
    )}

    {element.configuration && (
      <dt>Electron Configuration</dt>
      <dd>{element.configuration ? element.configuration.join(", ") : null}</dd>
    )}

    {element.oxidation_states && (
      <dt>Oxidation States</dt>
      <dd>{element.oxidation_states ? element.oxidation_states.join(", ") : null}</dd>
    )}

    {element.cas_number && (
      <dt>CAS Number(s)</dt>
      <dd>{element.cas_number ? element.cas_number.join(", ") : null}</dd>
    )}

    {element.year_discovered && (
      <dt>Year Discovered</dt>
      <dd>{element.year_discovered}</dd>
    )}

    {element.discovered_by && (
      <dt>Discovered By</dt>
      <dd>{element.discovered_by}</dd>
    )}

    {element.year_named && (
      <dt>Year Named</dt>
      <dd>{element.year_named}</dd>
    )}

    {element.named_by && (
      <dt>Named By</dt>
      <dd>{element.named_by}</dd>
    )}

    {element.name_meaning && (
      <dt>Name Meaning</dt>
      <dd>{element.name_meaning}</dd>
    )}

    {element.wiki && (
      <dt>Wikipedia</dt>
      <dd>
          <a href={element.wiki} target="_blank" rel="noopener noreferrer">
            {element.wiki}
          </a>
      </dd>
    )}
  </dl>

  <Fragment set:html={content ?? "<p>No element found</p>"} />

  {element.facts && element.facts.length > 0 && (
    <h2>Facts</h2>
    <ul>
      {element.facts.map((fact) => (
        <li>{fact}</li>
      ))}
    </ul>
  )}

</Layout>

<style>
  dl {
    display: grid;
    grid-template-columns: 20ch auto;
    gap: 0;
    margin: 1.5rem 0 2rem;
    padding: 0;
    border: 1px solid #e5e7eb;
    border-radius: 8px;
  }

  dd,
  dt {
    margin-inline: 0;
    padding-block: .75rem;
    padding-inline: 1rem 1.5rem;
    border-block-end: 1px solid #e5e7eb;
  }

  dt {
    padding-inline-end: 1.5rem;
    font-weight: 600;
  }

  dd {
    padding-inline-start: 1.5rem;
  }

  dt:nth-of-type(even),
  dd:nth-of-type(even) {
    background-color: #f2f2f2;
  }

  dt:last-of-type,
  dd:last-of-type {
    border-block-end: 0px solid transparent;
  }


  dt:after {
    content: ":";
  }
</style>