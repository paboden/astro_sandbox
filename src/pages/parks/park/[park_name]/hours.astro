---
import type { ParkSchema } from "@/types/park";
import BackTo from "@components/Navigation/BackTo/BackTo.astro";
import Container from "@layouts/Container.astro";
import Layout from "@layouts/Layout.astro";
import Prose from "@layouts/Prose.astro";
import type { GetStaticPaths } from 'astro';
import { getUsStateName } from '@lib/helpers'
import { Icon } from "astro-icon/components";

export const getStaticPaths = (async () => {
  const response = await fetch('http://localhost:4321/api/nps--parks.json');
  const parks = await response.json();
  return parks.items.map((park: ParkSchema) => ({
    params: { park_name: park?.name?.replace(/\s+/g, '-').toLowerCase() },
    props: { park },
  }));
}) satisfies GetStaticPaths;

const { park } = Astro.props as { park: ParkSchema };

const date = new Date();

// Format for a specific locale and options
const formatter = new Intl.DateTimeFormat('en-US', {
    weekday: 'long',
    year: 'numeric',
    month: 'long',
    day: 'numeric',
    hour: '2-digit',
    minute: '2-digit',
    // second: '2-digit',
    // timeZoneName: 'short',
});
---
<Layout>
  <div class="max-w-[80ch] mx-auto">

    <BackTo class="mt-3" href="/parks" title="Return to all blog authors listing page">Back to Parks</BackTo>

    <hgroup class="flex flex-col gap-2 align-baseline my-8">
      <p>HOURS</p>
      <h1 class="font-bold text-3xl m-0 mb-0 p-0">{park?.name} <span class="font-light text-3xl m-0 p-0 italic">{park?.designation}</span></h1>
      {park?.parkCode && (
        <p class="text-xs text-gray-500">Parkcode: {park?.parkCode}</p>
      )}
    </hgroup>

    {park?.description && (
      <section>
        {/* <h2 class="font-bold text-lg mb-2">Description</h2> */}
        <p>{park?.description}</p>
      </section>
    )}

    {park?.states && (
      <section>
        <h2 class="font-semibold text-lb mb-2">State(s)</h2>
        <nav class="mb-12">
          <ul class="list-none flex flex-wrap gap-2">{park?.states?.split(",").map((state) => {
            const url = `/parks/state/${state.toLowerCase()}`;
            return (
              <li class="flex align-middle text-sm list-none">
                <a class="flex flex-nowrap align-middle items-center px-3 bg-gray-400 hover:bg-gray-600 rounded-2xl p-1 text-white no-underline gap-1" href={url}>
                  {getUsStateName(state)}
                  <Icon name="mdi:arrow-up"></Icon>
                </a>
              </li>
            )
            })}
          </ul>
        </nav>
      </section>
    )}

    {park.directionsInfo && (
      <section>
        <h2 class="font-semibold text-lg mb-2">Directions</h2>
        <p>{park.directionsInfo}</p>
        <a href={park.directionsUrl}>More</a>
      </section>
    )}

    {park?.weatherInfo && (
      <section>
        <h2 class="font-semibold text-lg mb-2">Weather</h2>
        <p>{park?.weatherInfo}</p>
      </section>
    )}

    {park.operatingHours && (
      <section>
        <h2 class="font-semibold text-lg mb-4">Operating hours</h2>
        <ul class="list-none p-0 m-0 ml-12">
          {park?.operatingHours.map((item) => (
            <li class="mb-6">
              <section>
                <h3 class="font-semibold my-3 py-0">{item?.name}</h3>
                <p>{item?.description}</p>
                <h4 class="font-semibold my-3 mb-2 py-0">Standard Hours</h4>
                <dl class="ml-0">
                  <div class="flex items-baseline gap-2">
                    <dt class="font-semibold my-0 py-0">Monday:</dt>
                    <dd class="font-normal my-0 py-0">{item?.standardHours?.monday}</dd>
                  </div>
                  <div class="flex items-baseline gap-2">
                    <dt class="font-semibold my-0 py-0">Tuesday:</dt>
                    <dd class="font-normal my-0 py-0">{item?.standardHours?.tuesday}</dd>
                  </div>
                  <div class="flex items-baseline gap-2">
                    <dt class="font-semibold my-0 py-0">Wednesday:</dt>
                    <dd class="font-normal my-0 py-0">{item?.standardHours?.wednesday}</dd>
                  </div>
                  <div class="flex items-baseline gap-2">
                    <dt class="font-semibold my-0 py-0">Thursday:</dt>
                    <dd class="font-normal my-0 py-0">{item?.standardHours?.thursday}</dd>
                  </div>
                  <div class="flex items-baseline gap-2">
                    <dt class="font-semibold my-0 py-0">Friday:</dt>
                    <dd class="font-normal my-0 py-0">{item?.standardHours?.friday}</dd>
                  </div>
                  <div class="flex items-baseline gap-2">
                    <dt class="font-semibold my-0 py-0">Saturday:</dt>
                    <dd class="font-normal my-0 py-0">{item?.standardHours?.saturday}</dd>
                  </div>
                  <div class="flex items-baseline gap-2">
                    <dt class="font-semibold my-0 py-0">Sunday:</dt>
                    <dd class="font-normal my-0 py-0">{item?.standardHours?.sunday}</dd>
                  </div>
                </dl>
                {item?.exceptions && item?.exceptions.length > 0 && (
                  <details>
                    <summary>Exceptions</summary>
                    <ul>
                      {item?.exceptions?.map((exception) => { 
                        const startDate = exception?.startDate as string;
                        const endDate = exception?.endDate as string;
                        return (
                          <li>
                          <h4>{exception?.name}</h4>
                          <time>From <strong>{formatter.format(new Date(startDate))}</strong> to <strong>{formatter.format(new Date(endDate))}</strong></time>
                          <dl>
                            <dt>Monday</dt>
                            <dd>{exception?.exceptionHours?.monday}</dd>
                            <dt>Tuesday</dt>
                            <dd>{exception?.exceptionHours?.tuesday}</dd>
                            <dt>Wednesday</dt>
                            <dd>{exception?.exceptionHours?.wednesday}</dd>
                            <dt>Thursday</dt>
                            <dd>{exception?.exceptionHours?.thursday}</dd>
                            <dt>Friday</dt>
                            <dd>{exception?.exceptionHours?.friday}</dd>
                            <dt>Saturday</dt>
                            <dd>{exception?.exceptionHours?.saturday}</dd>
                            <dt>Sunday</dt>
                            <dd>{exception?.exceptionHours?.sunday}</dd>
                          </dl>
                          </li>
                        )
                      })}
                    </ul>
                  </details>
                )}
              </section>
            </li>
          ))}
        </ul>
      </section>
    )}

    {park?.activities.length > 0 && (
      <section>
        <h2 class="font-semibold text-lg mb-2">Activities</h2>
        <ul>
          {park?.activities.map((item) => (
            <li>{item}</li>
          ))}
        </ul>
      </section>
    )}

    {park?.topics.length > 0 && (
      <section>
        <h2 class="font-semibold text-xl mb-2">Topics</h2>
        <ul>
          {park?.topics.map((item) => (
            <li>{item}</li>
          ))}
        </ul>
      </section>
    )}

    {park?.entranceFees.length > 0 && (
      <section>
        <h2 class="font-semibold text-xl mb-2">Entrance Fees</h2>
        <dl>
          {park?.entranceFees.map((item) => (
            <div>
              <dt>{item?.title}</dt>
              <dd><strong>${item?.cost}</strong></dd>
              <dd>{item?.description}</dd>
            </div>
          ))}
        </dl>
      </section>
    )}

    {park?.entrancePasses.length > 0 && (
      <section>
        <h2 class="font-semibold text-xl mb-2">Entrance Passes</h2>
        <dl>
          {park?.entrancePasses.map((item) => (
            <div>
              <dt>{item?.title}</dt>
              <dd><strong>${item?.cost}</strong></dd>
              <dd>{item?.description}</dd>
            </div>
          ))}
        </dl>
      </section>
    )}

    {park?.addresses.length > 0 && (
      <section>
        <h2 class="font-semibold text-xl">Addresses</h2>
        <ul>
          {park?.addresses.map((address) => (
            <li class="mt-4">
              <address>
                <h3 class="font-semibold text-lg mb-2">{address?.type}</h3>
                {address?.line1 && <p>{address?.line1}</p>}
                {address?.line2 && <p>{address?.line2}</p>}
                {address?.line3 && <p>{address?.line3}</p>}
                {address?.city && address?.stateCode && address?.postalCode && <p>{address?.city}, {address?.stateCode} {address?.postalCode}</p>}
              </address>
            </li>
          ))}
        </ul>
      </section>
    )}

    {park?.url && (
      <nav class="my-20">
        <a href={park.url}>
          <h2 class="font-bold text-lg mb-2">Learn more!</h2>
          <p>Visit the official website for this park.</p>
        </a>
      </nav>
    )}

  </div>
</Layout>

<style>
  section + section {
    margin-block-start: 2rem;
  }
</style>