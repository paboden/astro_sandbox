---
import { z } from 'astro:content';
import type { HTMLAttributes } from "astro/types";
import { twMerge } from "tailwind-merge";

const sizes = {
  "6xl": "text-6xl",
  "5xl": "text-5xl",
  "4xl": "text-4xl",
  "3xl": "text-3xl",
  "2xl": "text-2xl",
  xl: "text-xl",
  lg: "text-lg",
  md: "text-md",
  sm: "text-sm",
};

const weights = {
  light: "font-light",
  normal: "font-normal",
  medium: "font-medium",
  semibold: "font-semibold",
  bold: "font-bold",
};

const defaultSizes = {
  h1: "text-5xl",
  h2: "text-3xl",
  h3: "text-2xl",
  h4: "text-xl",
  h5: "text-xl",
  h6: "text-lg",
};

const defaultWeights = {
  h1: "font-bold",
  h2: "font-bold",
  h3: "font-semibold",
  h4: "font-semibold",
  h5: "font-medium",
  h6: "font-normal",
};

function assertLevel(level: number): string {
  return `h${level}`;
}

interface Props extends HTMLAttributes<"h1"> {
  size?: keyof typeof sizes;
  weight?: keyof typeof weights;
  as?: "h1" | "h2" | "h3" | "h4" | "h5" | "h6";
  level?: 1 | 2 | 3 | 4 | 5 | 6;
}

// Headings use defaults based on the "as" prop.
// This makes it more structured from the start.
let { as: As, weight, size, level = 2, ...attr } = Astro.props;

if (!As && level) {
  As = assertLevel(level) as "h1" | "h2" | "h3" | "h4" | "h5" | "h6";
}

if (!As) {
  As = "h2";
}

let default_size: string = defaultSizes[As];
let default_weight: string = defaultWeights[As];

const fontSize = size ? sizes[size] : default_size;
const fontWeight = weight ? weights[weight] : default_weight;
---

<As
  class:list={twMerge([
    "heading",
    fontSize,
    fontWeight,
    "leading-13",
    attr.class,
  ])}
  {...attr}
>
  <slot />
</As>
