---
import { parseHTML } from 'linkedom';
import type { HTMLAttributes } from 'astro/types';
import { Icon } from 'astro-icon/components';

interface Props extends HTMLAttributes<"section">{
	type: 'horizontal' | 'vertical';
  syncKey?: string;
}

const {type = 'horizontal', syncKey, ...attr} = Astro.props;

const tabs_html = await Astro.slots.render('default');

let tabs = new Array();
let filtered_html = '';

if (tabs_html) {
  const { document } = parseHTML(tabs_html);
  const tabsHTMLCollection = document.querySelectorAll('section[data-tabitem]');

  const tabsArray = Array.from(tabsHTMLCollection);
  tabsArray.forEach((tab) => {
    tabs.push({
      id: tab.getAttribute('data-label').replace(/\s+/g, '-').toLowerCase(),
      label: tab.getAttribute('data-label'),
      icon: tab.getAttribute('data-icon'),
    })
  });

  let FilteredHTML = '';
  tabsHTMLCollection.forEach(element => {
    FilteredHTML += element.outerHTML;
  });

  document.body.innerHTML = FilteredHTML;
  filtered_html = document.body.innerHTML;
}
---
<section class="tabs" data-tabs-type={type} data-sync-key={syncKey} {...attr}>

  {tabs && (
    <nav role="navigation" class="tablist-wrapper">
      <ul role="tablist" class="tablist">
        {tabs.map((tab, index) => {
          const href = `#tab-panel-${tab.id}`;
          const panel_id = `tab-panel-${tab.id}`;
          const id = `#tab-${tab.id}`;
          return (
            <li role="presentation" class="tab" data-index={index}>
              <a 
                role="tab"
                href={href}
                id={id}
                data-panel-id={panel_id}
                aria-selected={index == 0}
                tabindex={index !== 0 ? -1 : 0}
                class="tab__link">
                  {tab.icon && <Icon name={tab.icon} class="inline-flex items-center"></Icon>}
                  {tab.label}
                </a>
              </li>
            )
        })}
      </ul>
    </nav>
  )}

  <Fragment set:html={filtered_html} />
</section>

<script is:inline>

// Find all tabGroups...  
const tabs = document.querySelectorAll('.tabs');
tabs.forEach((tabGroup) => {

  const tabGroupPanels = tabGroup.querySelectorAll('section[data-tabitem]');
  const tablistLinks = tabGroup.querySelectorAll('.tab .tab__link');

  tabGroupPanels.forEach(panel => panel.style.display = 'none');

  tablistLinks.forEach((tabListItem, idx) => {
    const panel_id = tabListItem.getAttribute('data-panel-id');
    const panel = document.getElementById(panel_id);
    panel.style.display = idx === 0 ? 'block' : 'none';
    tabListItem.addEventListener('click', (e) => {
      e.preventDefault();
      const panel_id = tabListItem.getAttribute('data-panel-id');
      const panel = document.getElementById(panel_id);
      panel.style.display = 'block';
    });
  });

});


  // const tabLinks = document.querySelectorAll('.tablist .tab .tab__link');
  // tabLinks.forEach((tabLink, index) => {
  //   const panel_id = tabLink.getAttribute('data-panel-id');
  //   const panel = document.getElementById(panel_id);
  //   console.log(index);
  //   console.log(panel_id);
  //   // panel.hidden = index == 0;

  //   tabLink.addEventListener('click', (e) => {
  //     e.preventDefault();
  //     const href = tabLink.getAttribute('href');
  //     const panel = document.getElementById(href);
  //     panel.hidden = false;
  //   });
  // });

  // const tablist = document.querySelector('[role="tablist"]');
  // const tab__links = [...tablist.querySelectorAll('[role="tab"]')];
  // console.log(tab__links);

</script>

<style>
  .tablist-wrapper {
		overflow-x: auto;
	}

  .tablist {
    display: flex;
    gap: 1rem;
    list-style: none;
  }

  .tab {
    border: 1px solid gray;
    border-block-end: 0;
    padding: 1rem;
    align-items: center;
  }

  .tab [role='tab'][aria-selected='true'] {
		color: blue;
		border-color: blue;
		font-weight: 600;
	}
</style>