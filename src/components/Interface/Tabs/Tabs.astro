---
import { parseHTML } from 'linkedom';
import type { HTMLAttributes } from 'astro/types';
import { Icon } from 'astro-icon/components';

interface Props extends HTMLAttributes<"section">{
	type: 'horizontal' | 'vertical';
  syncKey?: string;
}

const {type = 'horizontal', syncKey, ...attr} = Astro.props;

const tabs_html = await Astro.slots.render('default');

let tabs = new Array();
let filtered_html = '';

// If content is found in the slot, we need to parse it to pull out data from
// the tabItem components.
if (tabs_html) {
  const { document } = parseHTML(tabs_html);
  const tabsHTMLCollection = document.querySelectorAll('[role="tabpanel"]');

  const tabsArray = Array.from(tabsHTMLCollection);
  tabsArray.forEach((tab) => {
    tabs.push({
      id: tab.getAttribute('data-label').replace(/\s+/g, '-').toLowerCase(),
      label: tab.getAttribute('data-label'),
      icon: tab.getAttribute('data-icon'),
      tab_class: tab.getAttribute('data-tab-class'),
    })
  });

  // Uncomment to limit the components in slot.
  // let FilteredHTML = '';
  // tabsHTMLCollection.forEach(element => {
  //   FilteredHTML += element.outerHTML;
  // });

  // Uncomment to limit the components in slot.
  // document.body.innerHTML = FilteredHTML;
  // filtered_html = document.body.innerHTML;
}
---
<section class={`tabs ${attr.class}`} data-tabs-type={type} {...attr}>

  {tabs && (
    <div class="tablist-wrapper overflow-auto">
      <ul role="tablist" class="flex list-none border-0 border-gray-300 gap-1">
        {tabs.map((tab, index) => {
          const panel_id = `tab-panel-${tab.id}`;
          const id = `#tab-${tab.id}`;
          return (
            <li role="presentation" class="tab" data-index={index}>
              <button 
                role="tab"
                id={id}
                data-tablink
                data-panel-id={panel_id}
                aria-selected={index == 0}
                aria-controls={panel_id}
                tabindex={index !== 0 ? -1 : 0}
                class={`tab__button ${tab.tab_class}`}>
                  {tab.icon && <Icon name={tab.icon} class="inline-flex items-center mr-1"></Icon>}
                  {tab.label}
                </button>
              </li>
            )
        })}
      </ul>
    </div>
  )}

  <div class="tabs__panels">
    <!-- <Fragment set:html={filtered_html} /> -->
    <slot />
  </div>
</section>

<script is:inline >

// Wait till everything is loaded...
document.addEventListener("DOMContentLoaded", function() {

  // This code uses setups and snippets from example code on:
  // https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Reference/Roles/tab_role#example
  const tabsContainer = document.querySelectorAll('section.tabs');
  tabsContainer.forEach((tabsGroup) => {

    // The tablist and an array of the buttons in that list, for this tab group.
    const tabsGroupTabList = tabsGroup.querySelector('[role="tablist"]');
    const tabsGrouptabListButtons = Array.from(tabsGroupTabList.querySelectorAll('[role="tab"]'));

    // All panel sections for this tabs group.
    const tabsGroupPanelsContainer = tabsGroup.querySelector(".tabs__panels");
    const tabsGroupPanels = Array.from(tabsGroupPanelsContainer.querySelectorAll('[role="tabpanel"]'));

    // Process the buttons and assign event listeners.
    tabsGrouptabListButtons.forEach((tabButton, idx) => {
      tabButton.addEventListener("click", (e) => {
        showTab(e.target);
      });
      tabButton.addEventListener("keydown", (e) => {
        if (e.key === "Enter" || e.key === " ") {
          e.preventDefault();
          e.stopPropagation();
          showTab(e.target);
        }
      });
    })

    tabsGroupTabList.addEventListener("keydown", (e) => {
      const currentTab = e.target;
      const currentIndex = tabsGrouptabListButtons.indexOf(currentTab);

      // Exit if the focused element is not a tab.
      if (currentIndex === -1) return;
      let newIndex = 0;

      switch (e.key) {
        case "ArrowDown":
        case "ArrowRight":
          newIndex = (currentIndex + 1) % tabsGrouptabListButtons.length;
          break;
        case "ArrowUp":
        case "ArrowLeft":
          newIndex = (currentIndex - 1 + tabsGrouptabListButtons.length) % tabsGrouptabListButtons.length;
          break;
        case "Home":
          newIndex = 0;
          break;
        case "End":
          newIndex = tabs.length - 1;
          break;
        default:
          // Exit if the key is not recognized.
          return; 
      }

      e.preventDefault();
      e.stopPropagation();
      tabsGrouptabListButtons[newIndex].focus();
    });

    function showTab(targetTab) {

      // Unselect other tabs and set this tab as selected
      for (const tab of tabsGrouptabListButtons) {
        if (tab === targetTab) continue;
        tab.setAttribute("aria-selected", false);
        tab.tabIndex = -1;
      }
      targetTab.setAttribute("aria-selected", true);
      targetTab.tabIndex = 0;

      // Hide other tab panels and show the selected panel
      const targetTabPanel = document.getElementById(
        targetTab.getAttribute("aria-controls"),
      );
      for (const panel of tabsGroupPanels) {
        if (panel === targetTabPanel) continue;
        panel.hidden = true;
      }
      targetTabPanel.hidden = false;
    }

    // Trigger the first panel after document load.
    const initialActiveButton = tabsGroup.querySelector('li.tab[data-index="0"] > [role="tab"]')
    if (initialActiveButton) {
      initialActiveButton.click();
    }

  });
});
</script>

<style>
  .tabs[data-tabs-type='horizontal'] .tablist {
    flex-wrap: wrap;
    justify-content: flex-start;
    align-items: center;
    gap: 1rem;
  }

  .tabs[data-tabs-type='horizontal'] .tabs__panels {
    padding-block-start: 3rem;
  }

  .tab [role='tab'] {
    display: flex;
    width: 100%;
    padding: .5rem 1rem;
    align-items: center;
    font-weight: 600;
    transition: all 0.5s ease-in-out;
    cursor: pointer;
  }

  .tab [role='tab'][aria-selected='true'] {
    transition: all 0.5s ease-in-out;
	}

  .tabs[data-tabs-type='vertical'] {
    display: flex;
    gap: 2rem;
    flex-wrap: wrap;
  }

  .tabs[data-tabs-type='vertical'] .tablist-wrapper {
    flex-basis: 15rem;
    flex-grow: 1;
  }

  .tabs[data-tabs-type='vertical'] .tablist-wrapper [role='tablist'] {
    display: flex;
    flex-direction: column;
  }

  .tabs[data-tabs-type='vertical'] .tabs__panels {
    flex-basis: 0;
    flex-grow: 999;
    min-inline-size: 50%;
  }

</style>